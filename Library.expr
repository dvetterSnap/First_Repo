
{
  rejectedState: filings => filings
    .filter(f => f.taxAgency != "IRS" && f.taxYear == 2024 && f.status == "REJECTED_AGENCY")
    .map(f => f.taxAgency)[0],


  irsFundAmount: filings => parseFloat(
    filings
      .filter(f => f.filingType == "IRS-IIT-FILING" && f.taxYear == 2024)
      .reduce((a, b) => a.filingStatusDate > b.filingStatusDate ? a : b, {filingStatusDate: "", paymentAmount: null})
      .paymentAmount
  ),


  epoch: tsArray => Date.parse(parseFloat(tsArray[0].firstAuthTimestampRT)),
  anaualIncome: income => income.taxPeriodValue == "2024" ? parseFloat(income.annualIncome) : null,


  qual_eitc: events => events
    .filter(x => x.taxYear == '2024')
    .map(x => x.qualifiedForEitc)[0],


  marital2024: events => events
    .filter(x => x.taxPeriodValue == '2024')[0].hasMaritalStatusChanged,

  sku2024: orders => orders
    .filter(x => x.taxYear == '2024')
    .map(x => x.completedSku)[0],


  genzFlag: segments => segments
    .filter(x => x.taxYear == 2024)
    .map(x => x.segmentGenzFlag)[0]

}
